/*
 *  File  sn74v283.h
 *
 *  API for FIFO to receive & briefly store data generated by ADC
 *
 *  Created  2017-May-30
 *  Author   bplache
 */ 

#ifndef SN74V283_H_
#define SN74V283_H_

# include <stdint.h>

# include "spectrometer_data.h"
# include "components.h"

# define SN74V283_OK    0
# define SN74V283_FAIL -1

//  Init sets all pins for all FIFOs to their proper function.
//
int16_t SN74V283_InitGpio(void);

//  Start is currently a master reset (MRS),
//  plus resetting of corresponding firmmware variables.
//
int16_t SN74V283_Start( component_selection_t which );

# if 0
//  Write enable / disable is needed to separate
//  readout (write to FIFO) from
//  clearing (do not write to FIFO).
//
//  ALERT: Not available in original design.
//  In original design, the WriteEnable line is tied with the ADC Power Down line.
//  It might be possible to fly-wire an unused GPIO pin,
//  e.g., one that is reserved for an optional CT sensor
//  or the alternate Keller pressure sensor, to the jumper
//  that connects the ADC power down and the write enable lines.
//
int16_t SN74V283_WriteEnable  ( component_selection_t which );
int16_t SN74V283_WriteDisable ( component_selection_t which );
# endif

# if 0
//  Read enable is set when retrieving data from the FIFO.
//  After enabling the read, each 2-byte value is retrieved by manually
//  clocking via pin EBI_NRD.
//
int16_t SN74V283_ReadEnable  ( component_selection_t which );
int16_t SN74V283_ReadDisable ( component_selection_t which );
# endif

//  IsEmpty is ideally used in conjunction with reading data,
//  to avoid reading beyond the FIFO content.
//
int16_t SN74V283_IsEmpty    ( component_selection_t which );
int16_t SN74V283_IsHalfFull ( component_selection_t which );
int16_t SN74V283_IsFull     ( component_selection_t which );

//  Report a new full spectrum in the FIFO.
//  Triggered by spectrometer EOS (end of scan) when acquiring data.
//
void     SN74V283_AddedSpectrum     ( component_selection_t which, Spec_Aux_Data_t *aux );
uint16_t SN74V283_GetNumOfSpectra   ( component_selection_t which );
void     SN74V283_ReportNewClearout ( component_selection_t which );
uint16_t SN74V283_GetNumOfCleared   ( component_selection_t which );

//  Read spectrum from FIFO.
//  !!! Must have enabled reading before calling this function  !!!
//  !!! Must select the proper chip for the shared parallel bus !!!
//
//  int16_t SN74V283_ReadSpectrum ( component_selection_t which, uint16_t destination[], int sizeofDestination );


#endif /* SN74V283_H_ */
